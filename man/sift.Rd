% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/exp_sift.R
\name{sift}
\alias{sift}
\title{Find relevant variables in a dataframe using fuzzy searches}
\usage{
sift(.df, ..., .dist = 0, .rebuild = FALSE)
}
\arguments{
\item{.df}{(Dataframe) A dataframe to search through.}

\item{...}{(Dots) Search query. See Details for more information.}

\item{.dist}{(Numeric) The maximum distance allowed for a match when searching
fuzzily. See \code{max.distance} in \code{\link[=agrep]{agrep()}}. In short: a proportion is the fraction of
the pattern length that can be flexible (e.g. \code{0.1} = 10\% of the pattern length),
whereas whole integers > 0 are the number of characters that can be flexible.}

\item{.rebuild}{(Logical) If \code{TRUE}, then force a dictionary rebuild even if it normally
would not be triggered.}
}
\value{
Invisibly returns a dataframe. The contents of that dataframe depend on the query:
\itemize{
\item If \code{...} is empty, the full data dictionary for \code{df} is returned.
\item If the query was matched, only returns matching rows of the data dictionary.
\item If the query was not matched, return no rows of the dictionary (but all columns).
}
}
\description{
It can be hard to find the right column in a dataframe with hundreds or thousands of
columns. This function gives you interactive, flexible searching through a dataframe,
suggesting columns that are relevant to your query and showing some basic summary
stats about what they contain.
}
\details{
You have two ways to search with \code{sift()}: \emph{fuzzy search} or \emph{look-around search}.
\itemize{
\item \strong{Fuzzy search} lets you get results that are close, but not exact, matches to your
query. For example, \code{"cars"} can match \code{cats}. This is useful because real-world
labelling is not always perfect; a query for \code{"baseline"} will match \code{baseline}
or \verb{base line} or even OCR errors or typos like \code{basellne}. Fuzzy search needs to
be opted-into by setting the \code{.dist} argument to a value > 0.
\item \strong{Look-around search} matches keywords regardless of the order you give them. This
means that you can ask for \verb{cow, number} and get a match for \verb{number of cows}.
This is useful when you have an idea of what keywords should be in a variable label,
but not how those keywords are actually used or phrased. \emph{Note that this is not
a fuzzy search, so the keywords have to match exactly.}
}

The kind of search that is performed depends on how you supply your query to \code{...}:
\itemize{
\item \strong{Pass one bare name:} Fuzzy search with a fixed string. Example: \code{sift(df, cow, .dist = 1)}
\item \strong{Pass one string:} Fuzzy search with a regular expression. Example: \code{sift(df, "cow.*?number", .dist = 1)}
\item \strong{Pass one bare name or string without changing \code{.dist}:} Non-fuzzy search. Example: \code{sift(df, cow)}
\item \strong{Pass more than one item:} (either as a vector or in multiple elements of \code{...}) Look-around
non-fuzzy search with fixed strings. Example: \code{dift(df, preferred, "cow", name)}
}
}
\examples{
\donttest{
sift(mtcars_lab)
sift(mtcars_lab, mileage)
sift(mtcars_lab, "date|time", arrival)
}

}
